// <auto-generated />
using System;
using KuCloud.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KuCloud.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240415161430_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KuCloud.Core.StorageAggregate.StorageNode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_storage_node");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_storage_node_parent_id");

                    b.ToTable("storage_node", (string)null);

                    b.HasDiscriminator<string>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("KuCloud.Core.StorageAggregate.FileNode", b =>
                {
                    b.HasBaseType("KuCloud.Core.StorageAggregate.StorageNode");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("content_type");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.HasDiscriminator().HasValue("File");
                });

            modelBuilder.Entity("KuCloud.Core.StorageAggregate.Folder", b =>
                {
                    b.HasBaseType("KuCloud.Core.StorageAggregate.StorageNode");

                    b.HasDiscriminator().HasValue("Folder");
                });

            modelBuilder.Entity("KuCloud.Core.StorageAggregate.StorageNode", b =>
                {
                    b.HasOne("KuCloud.Core.StorageAggregate.Folder", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_storage_node_folders_parent_id");

                    b.OwnsOne("KuCloud.Core.AuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<long>("StorageNodeId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("CreationTime")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Creator")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("CreatorId")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<bool>("IsDelete")
                                .HasColumnType("boolean");

                            b1.Property<DateTime?>("ModifiedTime")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("StorageNodeId");

                            b1.ToTable("storage_node");

                            b1.ToJson("audit_info");

                            b1.WithOwner()
                                .HasForeignKey("StorageNodeId")
                                .HasConstraintName("fk_storage_node_storage_node_id");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("KuCloud.Core.StorageAggregate.Folder", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
